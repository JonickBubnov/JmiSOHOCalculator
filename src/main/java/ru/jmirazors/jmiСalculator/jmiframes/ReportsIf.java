/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ru.jmirazors.jmiСalculator.jmiframes;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.BadLocationException;
import javax.swing.text.StyledDocument;
import javax.swing.text.rtf.RTFEditorKit;
import ru.jmirazors.jmiCalculator.beans.HtmlBean;
import ru.jmirazors.jmiСalculator.DAO.ReportsDAO;
import ru.jmirazors.jmiСalculator.entity.Kassa;
import ru.jmirazors.jmiСalculator.entity.Price;
import ru.jmirazors.jmiСalculator.entity.Product;
import ru.jmirazors.jmiСalculator.entity.Sklad;
import ru.jmirazors.jmiСalculator.entity.Stock;

/**
 *
 * @author User
 */
public class ReportsIf extends javax.swing.JInternalFrame {

    /**
     * Creates new form KassaIf
     */
    StringBuilder build = new StringBuilder();
    HtmlBean html = new HtmlBean();
    SimpleDateFormat format = new SimpleDateFormat("dd.MM.yyyy HH:mm");
    int repId = 0;
    
    public ReportsIf(int repId) {
        this.repId = repId;
        initComponents();       
        build.setLength(0);
        jTextPane1.setText(build.toString());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jToolBar1 = new javax.swing.JToolBar();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Отчет");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/images/line-chart.png"))); // NOI18N

        jPanel1.setPreferredSize(new java.awt.Dimension(591, 50));

        jButton1.setText("Закрыть");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(509, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        jTextPane1.setEditable(false);
        jTextPane1.setContentType("text/html"); // NOI18N
        jTextPane1.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        jScrollPane1.setViewportView(jTextPane1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/report.png"))); // NOI18N
        jButton6.setToolTipText("Сформировать отчет");
        jButton6.setFocusPainted(false);
        jButton6.setFocusable(false);
        jButton6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton6.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton6);

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/clear.png"))); // NOI18N
        jButton7.setToolTipText("Очистить");
        jButton7.setFocusPainted(false);
        jButton7.setFocusable(false);
        jButton7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton7.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton7);

        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/controls.png"))); // NOI18N
        jButton8.setToolTipText("Параметры");
        jButton8.setFocusPainted(false);
        jButton8.setFocusable(false);
        jButton8.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton8.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton8);

        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/file_save.png"))); // NOI18N
        jButton9.setToolTipText("Сохранить");
        jButton9.setFocusPainted(false);
        jButton9.setFocusable(false);
        jButton9.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton9.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton9);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private String getReportSalesFromDocuments(){
                double debt = 0;
                double credit = 0;
                build.append(html.htmlOpen())
                    .append(html.title("Отчет продажи по документам"))
                    .append(html.tableOpen("60"));
                build.append(html.TRGrayOpen())
                    .append(html.TH("Документ"))
                    .append(html.TH("№ док."))
                    .append(html.TH("Дата"))
                    .append(html.TH("Дебит"))
                    .append(html.TH("Кредит"));                
                build.append(html.TRClose());
                try {
                    List<Object> rep = new ReportsDAO().list(Kassa.class);            
                    for (int i = 0; i < rep.size(); i++) {
                        build.append(html.TROpen());
                        Kassa k = (Kassa)rep.get(i);
                        build.append(html.TD(k.getDocumenttype().getName(), "left"))
                            .append(html.TD(k.getDocNumber(), "left"))
                            .append(html.TD(format.format(k.getIndate()), "left"))
                            .append(html.TD(k.getDebt(), "right"))
                            .append(html.TD(k.getCredit(), "right"));
                        build.append(html.TRClose());
                        debt += k.getDebt();
                        credit += k.getCredit();
                    }            
                    build.append(html.TROpen())
                        .append(html.TD()).append(html.TD()).append(html.TD(html.Strong("Итог"), "right"))
                        .append(html.TD(debt, "right")).append(html.TD(credit, "right"))
                        .append(html.TRClose());
                    build.append(html.tableClose());
                    build.append("<br>");
                    String saldo;
                    if ( (debt-credit) >= 0 ) saldo = html.colorGreen( String.valueOf(debt-credit) );
                        else
                            saldo = html.colorRed( String.valueOf(debt-credit) );
                    build.append("<h3>Сальдо на конец периода: ")
                        .append(saldo)
                        .append(" руб.</h3>")
                        .append(html.htmlClose());
                } catch (Exception ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                return build.toString();
    }
    
    private String getReportStockBalances() {
                build.append(html.htmlOpen())
                    .append(html.title("Отчет остатки на складах"));
                build.append(html.tableOpen("60"));
                build.append(html.TRGrayOpen())
                    .append(html.TH("Артикул"))
                    .append(html.TH("Наименование"))
                    //.append(html.TH("Склад"))
                    .append(html.TH("Количество"))
                    .append(html.TH("Ед.изм."));                
                build.append(html.TRClose());                
                List<Stock> rep = new ReportsDAO().getStockReport();
                long storageId = 0;
                for (int i = 0; i < rep.size(); i++) {
                    
                    if (rep.get(i).getStorage().getId() != storageId) {
                        storageId = rep.get(i).getStorage().getId();
                        build.append(html.TRGrayOpen())
                                .append(html.TDSpan(rep.get(i).getStorage().getName(), 4))
                                .append(html.TRClose());
                    }
                    
                    build.append(html.TROpen());                    
                    build.append(html.TD(rep.get(i).getProduct().getArticul(), "left"))
                            .append(html.TD(rep.get(i).getProduct().getName(), "left"))
                            //.append(html.TD(rep.get(i).getStorage().getName(), "left"))
                            .append(html.TD(rep.get(i).getCount(), "right"))
                            .append(html.TD(rep.get(i).getProduct().getUnit().getName(), "right"));
                        build.append(html.TRClose());                    
                                                            
                }
                build.append(html.htmlClose());
                return build.toString();
    }
    
    private String getReportProductSales() {
                build.append(html.htmlOpen())
                    .append(html.title("Отчет продажи по номенклатуре"));
                build.append(html.tableOpen("80"));
                build.append(html.TRGrayOpen())
                    .append(html.TH("Артикул"))
                    .append(html.TH("Наименование"))
                    .append(html.TH("Приход"))
                    .append(html.TH("Расход"))
                    .append(html.TH("Стоимость"))
                    .append(html.TH("Валюта"))
                    .append(html.TH("Документ"))
                    .append(html.TH("№"))
                    .append(html.TH("Дата"));
                build.append(html.TRClose());
               List<Sklad> rep1 = new ReportsDAO().getSkladReport();
                for (Sklad rep11 : rep1) {
                    build.append(html.TROpen());                    
                    build.append(html.TD(rep11.getProduct().getArticul(), "left"))
                            .append(html.TD(rep11.getProduct().getName(), "left"))
                            .append(html.TD(rep11.getPrihod(), "left"))
                            .append(html.TD(rep11.getRashod(), "left"))
                            .append(html.TD(rep11.getCost(), "left"))
                            .append(html.TD("руб.", "center"))
                            .append(html.TD(rep11.getDocuments().getName(), "left"))
                            .append(html.TD(rep11.getDoc(), "left"))
                            .append(html.TD(format.format(rep11.getIndate()), "center"));
                        build.append(html.TRClose());                       
                }
                build.append(html.htmlClose());
                return build.toString();
    }
    
    private String getReportPriceList() {
        build.append(html.htmlOpen())
                .append(html.title("Прайс-Лист"));
        
        build.append(html.tableOpen("80"));
                build.append(html.TRGrayOpen())
                    .append(html.TH("Артикул"))
                    .append(html.TH("Наименование"))
                    .append(html.TH("Закупочная"))
                    .append(html.TH("Учетная"))
                    .append(html.TH("Оптовая"))
                    .append(html.TH("Розничная"));
                build.append(html.TRClose());        
        List<Product> prod = new ReportsDAO().getPriceList();
        for (Product pr1 : prod) {
            List<Price> price = pr1.getActualPriceList();
            build.append(html.TROpen())
                    .append(html.TD(pr1.getArticul(), "left"))
                    .append(html.TD(pr1.getName(), "left"));
            for (Price pr2 : price)
                build.append(html.TD(pr2.getPrice(), "right"));
            build.append(html.TRClose());
        }
        build.append(html.tableClose());
        build.append(html.htmlClose());
        return build.toString();
    }
    
    private String getReportHTML() {
        build.setLength(0);
        switch (repId) {
            // отчет 1
            case 1:                 
                return getReportSalesFromDocuments();
            // отчет 2    
            case 2:
                return getReportStockBalances();
            case 3:
                return getReportProductSales();
            case 4:
                return getReportPriceList();
        }        
        return html.title("Нет отчета");
    }
    
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // Очистить
        build.setLength(0);
        jTextPane1.setText("");        
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // Сформировать отчет
        jTextPane1.setText(getReportHTML());        
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        new ReportParametersDialog(null, true).setVisible(true);
    }//GEN-LAST:event_jButton8ActionPerformed

    // сохранить в файл
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        
        FileWriter fw = null;
        try {
            FileOutputStream fos = new FileOutputStream("report.rtf");
            RTFEditorKit kit = (RTFEditorKit)jTextPane1.getEditorKit();
            StyledDocument doc = jTextPane1.getStyledDocument();
            int len = doc.getLength();
            kit.write(fos, doc, 0, len);
            fos.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ReportsIf.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ReportsIf.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadLocationException ex) {
            Logger.getLogger(ReportsIf.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton9ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
}
