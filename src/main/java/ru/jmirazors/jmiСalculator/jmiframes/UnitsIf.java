/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ru.jmirazors.jmiСalculator.jmiframes;

import ru.jmirazors.jmiCalculator.MainFrame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JToolBar;
import javax.swing.table.DefaultTableModel;
import ru.jmirazors.jmiCalculator.beans.ColorTablesRenderer;
import ru.jmirazors.jmiСalculator.DAO.UnitDAO;
import ru.jmirazors.jmiСalculator.entity.Unit;

/**
 *
 * @author User
 */
public class UnitsIf extends javax.swing.JInternalFrame {

    /**
     * Creates new form UnitsIf
     */
    JToolBar tb;
    JButton dockButton = new JButton("Единицы измерения");    
    
    StringBuffer queryOption = new StringBuffer("from Unit where del=1");
    ArrayList<Unit> unitList;
    Unit unit;
    ColorTablesRenderer colorRenderer = new ColorTablesRenderer();
    
    DefaultTableModel tableModel = new DefaultTableModel(){
        @Override
        public boolean isCellEditable(int row, int col)
            { return true; }
    };
    
    public UnitsIf(JToolBar toolBar) {        
        this.tb = toolBar;
          dockButton.addActionListener(new ActionListener() {
               public void actionPerformed(ActionEvent evt) {
                    toggleState();
               }
          }); 
        tb.add(dockButton);        
        
        tableModel.addColumn("№");
        tableModel.addColumn("Наименование");
        tableModel.addColumn("Примечание");
        
        initComponents();
        
        //getUnitList();
        
        jTable1.getColumnModel().getColumn(0).setMaxWidth(24);
        jTable1.getColumnModel().getColumn(1).setMaxWidth(100);
        jTable1.getColumnModel().getColumn(2).setMaxWidth(260); 
        
        jTable1.setDefaultRenderer(Object.class, colorRenderer);
        
        getUnitList();
    }
     @Override
     public void dispose() {
          super.dispose();
          tb.remove(dockButton);
          tb.repaint();
     }
     private void toggleState() {
          try {
              if (this.isVisible())                  
                  this.hide();
              else {
                  this.show();                  
              }
          } catch (Exception ex) {
               ex.printStackTrace();
          }
     }               
    
    public void getUnitList() {
        
        if (jToggleButton1.isSelected()) 
            this.queryOption = new StringBuffer("from Unit");
        else
            queryOption = new StringBuffer("from Unit where del=1");        
        
        for (int i=tableModel.getRowCount(); i > 0; i--) {
            tableModel.removeRow(i-1);
        }
        tableModel.setRowCount(0);
        
        
        try {
            unitList = (ArrayList) new UnitDAO().list(queryOption.toString());
            
            Iterator iterator = unitList.iterator();
            while (iterator.hasNext()) {
                unit = (Unit) iterator.next();                
                tableModel.addRow(new Object[]{unit.getId(), unit.getName(), unit.getDescr()});                                                
            }
            tableModel.fireTableDataChanged();
        } catch (Exception e) {JOptionPane.showMessageDialog(this, "Не могу получить данные о еидиницах измерения. \n" + e, "Ошибка",
                    JOptionPane.ERROR_MESSAGE);}
    }    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setTitle("Единицы измерения");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/images/meter.png"))); // NOI18N
        setPreferredSize(new java.awt.Dimension(340, 200));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameIconified(evt);
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save.png"))); // NOI18N
        jButton1.setToolTipText("Сохранить");
        jButton1.setFocusPainted(false);
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/plus-sign.png"))); // NOI18N
        jButton2.setToolTipText("Добавить строку");
        jButton2.setFocusPainted(false);
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);

        jToggleButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/file_del.png"))); // NOI18N
        jToggleButton1.setToolTipText("Показывать удаленные");
        jToggleButton1.setFocusPainted(false);
        jToggleButton1.setFocusable(false);
        jToggleButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jToggleButton1);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        jTable1.setModel(tableModel);
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        tableModel.addRow(new Object[]{"","",""});
        unit = new Unit();
        unit.setName("");
        unit.setDescr("");
        unitList.add(unit);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            unitList.get(i).setName(tableModel.getValueAt(i, 1).toString());
            unitList.get(i).setDescr(tableModel.getValueAt(i, 2).toString());
            unitList.get(i).setDel((byte)1);
        }
        
        new UnitDAO().save(unitList);        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formInternalFrameIconified(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameIconified
        // TODO add your handling code here:
        hide();
    }//GEN-LAST:event_formInternalFrameIconified

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        // TODO add your handling code here:
        MainFrame.ifManager.setUnitsFrameOpen(false);
    }//GEN-LAST:event_formInternalFrameClosed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
}
